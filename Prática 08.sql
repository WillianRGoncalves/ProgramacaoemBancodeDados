
--EXERCÍCIO 1

CREATE OR REPLACE PROCEDURE UPDATE_VALOR_TOTAL
(V_PED_NUMERO IN PEDIDO.PED_NUMERO%type)
  IS
    BEGIN
      UPDATE PEDIDO
      SET PED_VALOR_TOTAL = (SELECT SUM(I.ITEM_QUANTIDADE * P.PRO_VALOR_UNIDADE) FROM ITEM_DO_PEDIDO I JOIN PRODUTO P ON P.PRO_CODIGO = I.PRO_CODIGO WHERE I.PED_NUMERO = 10 GROUP BY I.PED_NUMERO)
      where PED_NUMERO = V_PED_NUMERO;
      COMMIT;
    END UPDATE_VALOR_TOTAL;
/
select PED_VALOR_TOTAL from PEDIDO where PED_NUMERO = 10;
execute UPDATE_VALOR_TOTAL (10);
select PED_VALOR_TOTAL from PEDIDO where PED_NUMERO = 10;
DROP PROCEDURE UPDATE_VALOR_TOTAL;


-- EXERCÍCIO 2
CREATE SEQUENCE VENDEDOR_SEQ START WITH 10;
CREATE OR REPLACE PROCEDURE INSERIR_VENDEDOR
(V_VEN_NOME IN VENDEDOR.VEN_NOME%type, V_SALARIO_FIXO IN VENDEDOR.VEN_SALARIO_FIXO%TYPE)
  IS
    BEGIN
      INSERT INTO VENDEDOR VALUES (VENDEDOR_SEQ.NEXTVAL, V_VEN_NOME,V_SALARIO_FIXO);
      COMMIT;
    END INSERIR_VENDEDOR;
/
SELECT * FROM VENDEDOR;
EXECUTE INSERIR_VENDEDOR('Willian',3000.00);
DROP SEQUENCE VENDEDOR_SEQ;
DROP PROCEDURE INSERIR_VENDEDOR;


--EXERCÍCIO 3
CREATE OR REPLACE PROCEDURE DIVISAO_ZERO
  (EXEMPLO IN OUT NUMBER)
  IS
    BEGIN
      EXEMPLO := EXEMPLO/0;
    EXCEPTION
      WHEN ZERO_DIVIDE  THEN
        DBMS_OUTPUT.PUT_LINE ('ERRO DIVIDINDO POR ZERO ');
    END DIVISAO_ZERO;
/
DROP PROCEDURE DIVISAO_ZERO;

--EXERCÍCIO 4

CREATE OR REPLACE PROCEDURE INSERIR_JOSE
(V_VEN_CODIGO IN VENDEDOR.VEN_CODIGO%type)
  IS
      E_VENDEDOR_INVALIDO EXCEPTION;
    BEGIN
      UPDATE VENDEDOR
      SET VEN_NOME = 'JOSÉ ROBERTO' 
      WHERE VEN_CODIGO = V_VEN_CODIGO;
      IF NOT (SQL%FOUND) THEN
        RAISE E_VENDEDOR_INVALIDO;
      END IF;
      COMMIT;
    EXCEPTION
      WHEN E_VENDEDOR_INVALIDO THEN
        DBMS_OUTPUT.PUT_LINE ('VENDEDOR INVÁLIDO');
    END INSERIR_JOSE;
/
SET SERVEROUTPUT ON
EXECUTE INSERIR_JOSE(20);
SELECT * FROM VENDEDOR;
DROP PROCEDURE INSERIR_JOSE;

--EXERCÍCIO 5
CREATE OR REPLACE PROCEDURE DELETAR_CLIENTE
(V_CLI_CODIGO IN CLIENTE.CLI_CODIGO%type)
  IS
      EXCECAO EXCEPTION;
      PRAGMA EXCEPTION_INIT(EXCECAO, -2292);
    BEGIN
      DELETE FROM CLIENTE
      WHERE V_CLI_CODIGO = CLI_CODIGO;
      COMMIT;
    EXCEPTION
      WHEN EXCECAO THEN
        DBMS_OUTPUT.PUT_LINE ('NÃO PODE REMOVER');
    END DELETAR_CLIENTE;
/
SET SERVEROUTPUT ON
EXECUTE DELETAR_CLIENTE(1);
DROP PROCEDURE DELETAR_CLIENTE;

-- EXERCÍCIO 6


CREATE OR REPLACE FUNCTION descobrir_salario 
  (V_CLI_CODIGO in CLIENTE.CLI_CODIGO%type) 
  return number
  IS 
      V_NUMERO_PEDIDOS NUMBER(5);
      BEGIN 
        SELECT COUNT(P.PED_NUMERO) INTO V_NUMERO_PEDIDOS FROM CLIENTE C JOIN PEDIDO P ON C.CLI_CODIGO = P.CLI_CODIGO WHERE C.CLI_CODIGO = V_CLI_CODIGO;
  Return V_NUMERO_PEDIDOS; 
  End descobrir_salario; 
/
DROP FUNCTION DESCOBRIR_SALARIO;
-- EXERCÍCIO 7

CREATE OR REPLACE PROCEDURE AUMENTAR_PRODUTO
  IS
    BEGIN
      FOR PRODUTO_RECORD IN (SELECT PRO_CODIGO, PRO_VALOR_UNIDADE FROM PRODUTO) LOOP
          IF (PRODUTO_RECORD.PRO_VALOR_UNIDADE) > 3 THEN
            UPDATE PRODUTO SET PRO_VALOR_UNIDADE = PRO_VALOR_UNIDADE * 1.1 WHERE PRODUTO_RECORD.PRO_CODIGO = PRO_CODIGO;
          END IF;
      END LOOP;
    END AUMENTAR_PRODUTO;
/

SELECT * FROM PRODUTO;
EXECUTE AUMENTAR_PRODUTO;
DROP PROCEDURE AUMENTAR_PRODUTO;


-- EXERCÍCIO 8
CREATE OR REPLACE PROCEDURE VENDEDOR_SALARIO
  IS
    BEGIN
      FOR VENDEDOR_RECORD IN (SELECT * FROM VENDEDOR) LOOP
          IF (VENDEDOR_RECORD.VEN_SALARIO_FIXO) < 2000 THEN
            DBMS_OUTPUT.PUT_LINE ('NOME: ' || VENDEDOR_RECORD.VEN_NOME || '    SALÁRIO: ' || VENDEDOR_RECORD.VEN_SALARIO_FIXO);
          END IF;
      END LOOP;
    END VENDEDOR_SALARIO;
/

SET SERVEROUTPUT ON
EXECUTE VENDEDOR_SALARIO;
DROP PROCEDURE VENDEDOR_SALARIO;

-- EXERCÍCIO 9
CREATE OR REPLACE PROCEDURE VENDEDOR_SALARIO_SOMA
  (RESULTADO OUT NUMBER) 
  IS
    BEGIN
      RESULTADO := 0;
      FOR VENDEDOR_RECORD IN (SELECT * FROM VENDEDOR) LOOP
          RESULTADO := RESULTADO + VENDEDOR_RECORD.VEN_SALARIO_FIXO;
      END LOOP;
    END VENDEDOR_SALARIO_SOMA;
/

DROP PROCEDURE VENDEDOR_SALARIO_SOMA;

--EXERCÍCIO 10
CREATE OR REPLACE PROCEDURE VENDEDOR_SALARIO_UPDATE
  IS
    BEGIN
      FOR VENDEDOR_RECORD IN (SELECT * FROM VENDEDOR) LOOP
          UPDATE VENDEDOR SET VEN_SALARIO_FIXO = VEN_SALARIO_FIXO * 1.1 WHERE VENDEDOR_RECORD.VEN_CODIGO = VEN_CODIGO;
      END LOOP;
    END VENDEDOR_SALARIO_UPDATE;
/

EXECUTE VENDEDOR_SALARIO_UPDATE;
SELECT * FROM VENDEDOR;
DROP PROCEDURE VENDEDOR_SALARIO_UPDATE;

-- EXERCÍCIO 11
CREATE OR REPLACE PROCEDURE VENDEDOR_DEMITIR
  IS
    EXCECAO EXCEPTION;
    PRAGMA EXCEPTION_INIT(EXCECAO, -2292);
    BEGIN
      DELETE FROM VENDEDOR WHERE VEN_CODIGO IN (SELECT VEN_CODIGO FROM VENDEDOR WHERE VEN_SALARIO_FIXO < 1500);
    EXCEPTION
      WHEN EXCECAO THEN
        DBMS_OUTPUT.PUT_LINE ('NÃO PODE REMOVER');
    END VENDEDOR_DEMITIR;
/
SELECT * FROM VENDEDOR;
SET SERVEROUTPUT ON
EXECUTE VENDEDOR_DEMITIR;
DROP PROCEDURE VENDEDOR_DEMITIR;

--EXERCÍCIO 12
SELECT COUNT(*) FROM (SELECT P.PED_NUMERO AS PEDIDO FROM PEDIDO P JOIN VENDEDOR V ON V.VEN_CODIGO = P.VEN_CODIGO WHERE V.VEN_CODIGO = 1);

CREATE OR REPLACE PROCEDURE VENDEDOR_PEDIDOS
  (V_VEN_COD IN VENDEDOR.VEN_CODIGO%TYPE)
  IS
    EXCECAO EXCEPTION;
    V_VENDEDOR VENDEDOR.VEN_CODIGO%TYPE;
    NUMERO_PEDIDOS NUMBER(2);
    BEGIN
      SELECT VEN_CODIGO INTO V_VENDEDOR FROM VENDEDOR WHERE VEN_CODIGO = V_VEN_COD;
      SELECT COUNT(*) INTO NUMERO_PEDIDOS FROM (SELECT P.PED_NUMERO AS PEDIDO FROM PEDIDO P JOIN VENDEDOR V ON V.VEN_CODIGO = P.VEN_CODIGO WHERE V.VEN_CODIGO = V_VEN_COD);
      IF NUMERO_PEDIDOS = 0  THEN
        RAISE EXCECAO;
      END IF;
      FOR PEDIDOS_RECORD IN (SELECT P.PED_NUMERO AS PEDIDO FROM PEDIDO P JOIN VENDEDOR V ON V.VEN_CODIGO = P.VEN_CODIGO WHERE V.VEN_CODIGO = V_VEN_COD) LOOP
        DBMS_OUTPUT.PUT_LINE ('PEDIDO FEITO: ' || PEDIDOS_RECORD.PEDIDO);
      END LOOP;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE ('VENDEDOR NÃO ENCONTRADO');
      WHEN EXCECAO THEN
        DBMS_OUTPUT.PUT_LINE ('VENDEDOR NÃO POSSUI PEDIDOS');
    END VENDEDOR_PEDIDOS;
/

SET SERVEROUTPUT ON
EXECUTE VENDEDOR_PEDIDOS(1);
DROP PROCEDURE VENDEDOR_PEDIDOS;